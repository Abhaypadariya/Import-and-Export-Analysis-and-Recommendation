# -*- coding: utf-8 -*-
"""AI_project_import_export

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XaB_THyM5k6w_a0sVwWsZDcFxeKLokMV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.simplefilter("ignore", category=pd.errors.SettingWithCopyWarning)

df = pd.read_csv('C:/Users/Abhay/Desktop/abhay/sem 6/AI/project/Export.csv')

df.head()

df.shape

df.isnull().sum()

df.dtypes

df.describe().T

cv1 = df['Import'].std()/df['Import'].mean()
cv2 = df['Export '].std()/df['Export '].mean()
cv3 = df['Production'].std()/df['Production'].mean()
cv4 = df['Consumption'].std()/df['Consumption'].mean()
print(cv1,cv2,cv3,cv4)

df.columns

df.rename(columns={'Domain Code':'Domain_Code','Area Code (M49)':'Area_Code',
                   'Element Code':'Element_Code','Item Code (CPC)':'Item_Code','Export ':'Export'},inplace=True)

df.columns

df.head(1)

df.nunique()


# Group by 'Area' and calculate the sum of 'Consumption', then reset the index
grouped_df = df.groupby('Area')['Consumption'].sum().reset_index()

# Sort the result in ascending order by the 'Consumption' column
grouped_df_sorted = grouped_df.sort_values(by='Consumption', ascending=False)

grouped = pd.DataFrame(grouped_df_sorted)

grouped.head(10)

# Plot the bar chart for top 10 countries by consumption
grouped.head(10).plot(x='Area', y='Consumption', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Top 10 Countries by Total Consumption')
plt.xlabel('Area (Country)')
plt.ylabel('Total Consumption')

# Display the plot
plt.show()

# Group by 'Area' and calculate the sum of 'Consumption', then reset the index
grouped_df = df.groupby('Area')['Production'].sum().reset_index()

# Sort the result in ascending order by the 'Consumption' column
grouped_df_sorted = grouped_df.sort_values(by='Production', ascending=False)

grouped = pd.DataFrame(grouped_df_sorted)

grouped.head(10)

# Plot the bar chart for top 10 countries by consumption
grouped.head(10).plot(x='Area', y='Production', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Top 10 Countries by Total Production')
plt.xlabel('Area (Country)')
plt.ylabel('Total Production')

# Display the plot
plt.show()

# Group by 'Area' and calculate the sum of 'Consumption', then reset the index
year_df = df.groupby('Year')['Production'].sum().reset_index()

# Sort the result in ascending order by the 'Consumption' column
year_df_sorted = year_df.sort_values(by='Production', ascending=False)

grouped_year = pd.DataFrame(year_df_sorted)

grouped_year.head(10)

# Plot the bar chart for top 10 countries by consumption
grouped_year.head(10).plot(x='Year', y='Production', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Total Production Trend')
plt.xlabel('Year')
plt.ylabel('Total Production')

# Display the plot
plt.show()

# Group by 'Area' and calculate the sum of 'Consumption', then reset the index
year_df = df.groupby('Year')['Consumption'].sum().reset_index()

# Sort the result in ascending order by the 'Consumption' column
year_df_sorted = year_df.sort_values(by='Consumption', ascending=False)

grouped_year = pd.DataFrame(year_df_sorted)

grouped_year.head(10)

# Plot the bar chart for top 10 countries by consumption
grouped_year.head(10).plot(x='Year', y='Consumption', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Total Consumption Trend')
plt.xlabel('Year')
plt.ylabel('Total Consumption')

# Display the plot
plt.show()

# Group by 'Area' and calculate the sum of 'Consumption', then reset the index
import_df = df.groupby('Area')['Import'].sum().reset_index()

# Sort the result in ascending order by the 'Consumption' column
import_df_sorted = import_df.sort_values(by='Import', ascending=False)

grouped_import = pd.DataFrame(import_df_sorted)

grouped_import.head(10)

# Plot the bar chart for top 10 countries by consumption
grouped_import.head(10).plot(x='Area', y='Import', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Top 10 countries in Import')
plt.xlabel('Area')
plt.ylabel('Imports')

# Display the plot
plt.show()

# Group by 'Area' and calculate the sum of 'Consumption', then reset the index
export_df = df.groupby('Area')['Export'].sum().reset_index()

# Sort the result in ascending order by the 'Consumption' column
export_df_sorted = export_df.sort_values(by='Export', ascending=False)

grouped_export = pd.DataFrame(export_df_sorted)

grouped_export.head(10)

# Plot the bar chart for top 10 countries by consumption
grouped_export.head(10).plot(x='Area', y='Export', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Top 10 countries in Export')
plt.xlabel('Area')
plt.ylabel('Exports')

# Display the plot
plt.show()

item_df = df.groupby('Item')['Import'].sum().reset_index()

item_df_sorted = item_df.sort_values(by='Import', ascending=False)

item_df_sorted.plot(x='Item', y='Import', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Most Imported Items')
plt.xlabel('Items')
plt.ylabel('Imports')

# Display the plot
plt.show()

item_df = df.groupby('Item')['Export'].sum().reset_index()

item_df_sorted = item_df.sort_values(by='Export', ascending=False)

item_df_sorted.plot(x='Item', y='Export', kind='bar', legend=False, color='skyblue')

# Add title and labels
plt.title('Most Imported Items')
plt.xlabel('Items')
plt.ylabel('Exports')

# Display the plot
plt.show()

df['Item'].unique()

grouped_df = df.groupby(['Year', 'Item'])['Consumption'].sum().reset_index()
pivot_df = grouped_df.pivot(index='Item', columns='Year', values='Consumption')
pivot_df

# Plot for each item
for item in pivot_df.index:
    plt.plot(pivot_df.columns, pivot_df.loc[item], marker='o', label=item)

plt.title('Consumption Trend Over Years by Item')
plt.xlabel('Year')
plt.ylabel('Consumption')
plt.legend(title='Item', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.grid(True)
plt.show()

grouped_df = df.groupby(['Area', 'Item'])['Consumption'].sum().reset_index()
pivot_df = grouped_df.pivot(index='Area', columns='Item', values='Consumption')
pivot_df

# Get the column (spice) with the max value per row (country)
top_spice_per_country = pivot_df.idxmax(axis=1).reset_index()
top_spice_per_country.columns = ['Country', 'Top_Consumed_Spice']

top_spice_per_country

import plotly.express as px

# Your dataframe
df_top = top_spice_per_country  # with columns: 'Country', 'Top_Consumed_Spice'

# Treemap
fig = px.treemap(
    df_top,
    path=['Top_Consumed_Spice', 'Country'],  # hierarchy: spice > country
    values=[1]*len(df_top),  # equal weight for all countries
    color='Top_Consumed_Spice',
    color_discrete_sequence=px.colors.qualitative.Set3  # or 'Pastel', 'Bold', etc.
)

fig.update_layout(
    title='Top Consumed Spice by Country',
    margin=dict(t=50, l=25, r=25, b=25)
)

# fig.show()

grouped_df = df.groupby(['Area', 'Item'])['Production'].sum().reset_index()
pivot_df = grouped_df.pivot(index='Area', columns='Item', values='Production')
pivot_df

# Get the column (spice) with the max value per row (country)
top_spice_per_country = pivot_df.idxmax(axis=1).reset_index()
top_spice_per_country.columns = ['Country', 'Top_Produced_Spice']

top_spice_per_country

import plotly.express as px

# Your dataframe
df_top = top_spice_per_country  # with columns: 'Country', 'Top_Consumed_Spice'

# Treemap
fig = px.treemap(
    df_top,
    path=['Top_Produced_Spice', 'Country'],  # hierarchy: spice > country
    values=[1]*len(df_top),  # equal weight for all countries
    color='Top_Produced_Spice',
    color_discrete_sequence=px.colors.qualitative.Set3  # or 'Pastel', 'Bold', etc.
)

fig.update_layout(
    title='Top Produced Spice by Country',
    margin=dict(t=50, l=25, r=25, b=25)
)

fig.show()

area_top = df.groupby(['Area', 'Item'])['Consumption'].sum().reset_index()
pivot_df_top = area_top.pivot(index='Area', columns='Item', values='Consumption')
pivot_df_top

# For each spice (i.e., each column), find the country (i.e., row) with max value
top_country_per_spice = pivot_df_top.idxmax(axis=0)  # index = spice, value = country
top_value_per_spice = pivot_df_top.max(axis=0)       # index = spice, value = max consumption

# Combine into a DataFrame
result = pd.DataFrame({
    'Top_Country': top_country_per_spice,
    'Max_Consumption': top_value_per_spice
}).reset_index()

# Rename columns
result.columns = ['Spice', 'Top_Country', 'Max_Consumption']

# Create a styled table
styled_table = result.style.bar(subset=['Max_Consumption'], color='lightblue') \
                          .background_gradient(subset=['Max_Consumption'], cmap='YlGnBu') \
                          .set_table_styles([{'selector': 'thead th', 'props': [('background-color', 'lightgray')]}])

styled_table

area_top = df.groupby(['Area', 'Item'])['Production'].sum().reset_index()
pivot_df_top = area_top.pivot(index='Area', columns='Item', values='Production')
pivot_df_top

# For each spice (i.e., each column), find the country (i.e., row) with max value
top_country_per_spice = pivot_df_top.idxmax(axis=0)  # index = spice, value = country
top_value_per_spice = pivot_df_top.max(axis=0)       # index = spice, value = max production

# Combine into a DataFrame
result = pd.DataFrame({
    'Top_Country': top_country_per_spice,
    'Max_Production': top_value_per_spice
}).reset_index()

# Rename columns
result.columns = ['Spice', 'Top_Country', 'Max_Production']
result

# Create a styled table
styled_table = result.style.bar(subset=['Max_Production'], color='lightblue') \
                          .background_gradient(subset=['Max_Production'], cmap='YlGnBu') \
                          .set_table_styles([{'selector': 'thead th', 'props': [('background-color', 'lightgray')]}])

styled_table

import pandas as pd
df = pd.read_csv('C:/Users/Abhay/Desktop/abhay/sem 6/AI/project/Export.csv')

# Load data
df.head()

print(df.columns)


# Clean column names
df.columns = df.columns.str.strip()

# Compute Demand & Profitability
df['Demand'] = df['Import'] + df['Consumption']
df['Profit_Margin'] = df['Export'] - df['Production']

# Normalize scores
df['Demand_Score'] = df['Demand'] / df['Demand'].max()
df['Profit_Score'] = df['Profit_Margin'] / df['Profit_Margin'].max()

# Combine scores
df['Recommendation_Score'] = 0.6 * df['Demand_Score'] + 0.4 * df['Profit_Score']

# Sort by Recommendation Score
df_sorted = df.sort_values(by='Recommendation_Score', ascending=False)

# Keep only top 10 unique items
top_recommendations = df_sorted.drop_duplicates(subset='Item').head(10)

# Display relevant columns
print(top_recommendations[['Item', 'Area', 'Demand', 'Profit_Margin', 'Recommendation_Score']])
top_recommendations.to_csv('recommended_products.csv', index=False)
print("File saved as 'recommended_products.csv'")


